// Двумерный массив

// string[,] table = new string [2, 5];                // [,] - таблица. Наименование - table. 2 строки, 5 столбцов
// string.Empty - по умолчанию для строк инициализация такой константой
// table [0,0]  table [0,1] ... table [0,4]
// table [1,0]  table [1,1] ... table [1,4]    
// table[1, 2] = "слово";                              // Для того, чтобы обратиться к нужному нам элементу - 1-я строка, 2-й столбец

// for (int rows=0; rows<2; rows++)                         // Цикл обозначающик количество строк
// {
//     for (int columns=0; columns<5; columns++)            // Цикл обозначающик количество столбцов
//     {
//         Console.WriteLine($"-{table[rows, columns]}-");  // Вывод элекментов. Обращение к элементам массива через имя массива с указание индекса строки и стольбца.
//     }
// }

// void PrintArray(int[,] matr)
// {
//     for(int i=0; i<matr.GetLength(0); i++)          // имя массива.GetLength(0) возвращает количаство строк в массиве
//     {
//         for(int j=0; j<matr.GetLength(1); j++)      // имя массива.GetLength(1) возвращает количаство столбцов в массиве
//         {
//             Console.Write($"{matr[i, j]} ");        // После того как вывели все элементы столбиков текущей строчки,
//         }
//         Console.WriteLine();                        // принудительно сделаем переход на новую строку. 
//     }
// }



// void FillArray(int[,] matr)
// {
//     for(int i=0; i<matr.GetLength(0); i++)
//     {
//         for(int j=0; j<matr.GetLength(1); j++)
//         {
//             matr[i,j] = new Random().Next(1, 10);
//         }
//     }
// }

// int[,] matrix = new int[3, 4];
// PrintArray(matrix);
// Console.WriteLine();
// FillArray(matrix);
// PrintArray(matrix);


// int[,] pic = new int[,]
// {
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 },
// {0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// };

// void PrintImage(int[,] image)
// {
//     for(int i=0; i<image.GetLength(0); i++)          
//     {
//         for(int j=0; j<image.GetLength(1); j++)      
//         {
//             if (image[i,j]==0) Console.Write($" ");     //Проверяем, если текущий элемент совпадает с 0 - печатаем пробел.
//             else Console.Write($"+");                   //Если нет, печатаем +.
//         }
//         Console.WriteLine();
//     }
// }
// PrintImage(pic);

// void FillImage(int row, int col)                        // В качестве аргумента укажем позицию строки и столбца с которого нужно начать закраску.
// {
//     if (pic[row,col]==0)                                // Если текущий пиксель с указанной позиции col cow равен 0,
//     {
//         pic[row, col]=1;                                // закрашиваем
//         FillImage(row-1, col);                          // Функция вызывающая саму себя - Рекурсия
//         FillImage(row, col-1);
//         FillImage(row+1, col);
//         FillImage(row, col+1);
//     }
// }
// PrintImage(pic);
// FillImage(13, 13);                                      // Указываем точку, которая должна быть внутри изображения.
// PrintImage(pic);


// Рекурсия. 
// Вычисление факториала.

// int Factorial(int n)
// {
//     if (n==0) return 1;                 // 1!=1, 0!=1
//     else return n*Factorial(n-1);
// }
// Console.WriteLine(Factorial(3));        // 3!=3*2*1=6


// int Factorial(int n)
// {
//     if (n==0) return 1;                 // 1!=1, 0!=1
//     else return n*Factorial(n-1);
// }
// for (int i=1; i<40; i++)
// {
//     Console.WriteLine(Factorial(i));
// }


// double Factorial(int n)                 //  число 17! попросту не вмещается в тип данных integer. Тип данных, который такие числа ещё способен переваривать — double
// {
//     if (n==0) return 1;                 
//     else return n*Factorial(n-1);
// }
// for (int i=1; i<40; i++)
// {
//     Console.WriteLine($"{i}!={Factorial(i)}");
// }


// Вычисление чисел Фибоначчи
// 1 1 2 3 5 8 13 21 …   
// f(1) = 1
// f(2) = 1
// f(n) = f(n-1) + f(n-2)

double Fibonacci(int n)
{
    if(n==1 || n==2) return 1;
    else return Fibonacci(n-1) + Fibonacci(n-2);
}
for (int i=1; i<10; i++)
{
    Console.WriteLine($"f({i})={Fibonacci(i)}");
}
